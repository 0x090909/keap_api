package contacts

import (
	"errors"
)

type ContactsPostResponse_source_type int

const (
	SOURCE_TYPE_UNSPECIFIED_CONTACTSPOSTRESPONSE_SOURCE_TYPE ContactsPostResponse_source_type = iota
	API_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	APPOINTMENT_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	FORM_API_HOSTED_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	FORM_API_INTERNAL_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	IMPORT_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	INTERNAL_FORM_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	LANDING_PAGE_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	MANUAL_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	OTHER_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	UNKNOWN_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	WEBFORM_CONTACTSPOSTRESPONSE_SOURCE_TYPE
)

func (i ContactsPostResponse_source_type) String() string {
	return []string{"SOURCE_TYPE_UNSPECIFIED", "API", "APPOINTMENT", "FORM_API_HOSTED", "FORM_API_INTERNAL", "IMPORT", "INTERNAL_FORM", "LANDING_PAGE", "MANUAL", "OTHER", "UNKNOWN", "WEBFORM"}[i]
}
func ParseContactsPostResponse_source_type(v string) (any, error) {
	result := SOURCE_TYPE_UNSPECIFIED_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	switch v {
	case "SOURCE_TYPE_UNSPECIFIED":
		result = SOURCE_TYPE_UNSPECIFIED_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "API":
		result = API_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "APPOINTMENT":
		result = APPOINTMENT_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "FORM_API_HOSTED":
		result = FORM_API_HOSTED_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "FORM_API_INTERNAL":
		result = FORM_API_INTERNAL_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "IMPORT":
		result = IMPORT_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "INTERNAL_FORM":
		result = INTERNAL_FORM_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "LANDING_PAGE":
		result = LANDING_PAGE_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "MANUAL":
		result = MANUAL_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "OTHER":
		result = OTHER_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "UNKNOWN":
		result = UNKNOWN_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	case "WEBFORM":
		result = WEBFORM_CONTACTSPOSTRESPONSE_SOURCE_TYPE
	default:
		return 0, errors.New("Unknown ContactsPostResponse_source_type value: " + v)
	}
	return &result, nil
}
func SerializeContactsPostResponse_source_type(values []ContactsPostResponse_source_type) []string {
	result := make([]string, len(values))
	for i, v := range values {
		result[i] = v.String()
	}
	return result
}
func (i ContactsPostResponse_source_type) isMultiValue() bool {
	return false
}
